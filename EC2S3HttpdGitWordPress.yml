AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: key24
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:

#VPC Creation
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags: 
      - Key: 'Name'
        Value: 'VPC3'
    
#Public Subnet 1 Creation
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'    
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      Tags: 
      - Key: 'Name'
        Value: 'Public Subnet 1'


  #Public Subnet 2 Creation  
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'    
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'us-east-1b'
      VpcId: !Ref VPC
      Tags: 
      - Key: 'Name'
        Value: 'Public Subnet 2'    
      
  #Private Subnet 1 Creation
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'    
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      Tags: 
      - Key: 'Name'
        Value: 'Private Subnet 1'


  #Public Subnet 2 Creation  
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'    
    Properties:
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: 'us-east-1b'
      VpcId: !Ref VPC
      Tags: 
      - Key: 'Name'
        Value: 'Private Subnet 2'  
      

      
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation

  EC2InstanceHTTPD:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      Tags: 
      - Key: 'Name'
        Value: 'HTTPD'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          Fn::Sub:          
            - |
              #!/bin/bash -xe
              yum update -y
              yum install httpd -y
              chkconfig httpd on
              service httpd start
              cd /var/www/html
              echo "<html><h1>Hello This is the Web Server 02</h1></html>" > index.html  
            - Password: "abc"   

  EC2InstanceGIT:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      Tags: 
      - Key: 'Name'
        Value: 'GIT'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          Fn::Sub:          
            - |
              #!/bin/bash
              yum update -y
              yum install httpd -y
              yum install git -y
              chkconfig httpd on
              service httpd start
              cd /var/www/html
              git clone https://github.com/And96/and96.github.io  
            - Password: "abc"    

  EC2InstanceWordPress:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      Tags: 
      - Key: 'Name'
        Value: 'WordPress'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          Fn::Sub:          
            - |
              #!/bin/bash
              yum install httpd php php-mysql -y
              cd /var/www/html
              wget https://wordpress.org/wordpress-5.1.1.tar.gz
              tar -xzf wordpress-5.1.1.tar.gz
              cp -r wordpress/* /var/www/html/
              rm -rf wordpress
              rm -rf wordpress-5.1.1.tar.gz
              chmod -R 755 wp-content
              chown -R apache:apache wp-content
              service httpd start
              chkconfig httpd on  
            - Password: "abc"                    

  EC2InstancePrivate:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      Tags: 
      - Key: 'Name'
        Value: 'EC2Private'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup          
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet1

  S3Bucket1:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: b31oct21000000001 

  S3Bucket2:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: b31oct21000000002       
    
Outputs:
  InstanceId1:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2InstanceHTTPD'
  InstanceId1a:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2InstanceGIT'
  InstanceId1ab:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2InstanceWordPress'
  InstanceId2:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2InstancePrivate'  
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceHTTPD, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceHTTPD, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2InstanceHTTPD, PublicIp]
  BucketName1:
    Value: !Ref S3Bucket1
    Description: Name of the Amazon S3 bucket with a lifecycle configuration.
  BucketName2:
    Value: !Ref S3Bucket2
    Description: Name of the Amazon S3 bucket with a lifecycle configuration.
